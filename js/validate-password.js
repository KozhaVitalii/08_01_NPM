// Пример подключения внешней библиотеки, в которой проверяем проходит ли пароль валидацию по условию:
import Joi from 'joi';
// console.log(Joi);

const passSchema = Joi.string().min(3).max(10);

export default function validatePasword(password) {
      return passSchema.validate(password);
}

// 1. Дефолтный экспорт/импорт
// тай синтаксис называется дефолтным экспортом или экспортом по умолчанию. Экспортировать по дефолту можно только
// что - то одно(только одна сущность), к примеру только одну функцию:

// export default 555;

// или:

// export default function validatePasword(password) {
//     return true;
// }


// Это все пример с использованием Node.js:
// Использование библиотеки joi:
// const Joi = require('joi');
// Использование библиотеки описано в документации
// const passSchema = Joi.string().min(3).max(10).alphanum(); // к примеру мы хотим чтобы наши данные введенные в строку 
// проходили валидацию: не менее 3 и не более 10 символов и только цифры т.е. настраиваем свою схему валидации, таким 
// простым способом из библиотеки(сколько бы нам пришлось кода написать чтобы это реализовать ? А в этой библиотеке 
// под капотом уже реализовано за нас регулярное выражение)
// const passSchema = Joi.string().min(3).max(10);
// console.log(passSchema.validate('qwвыв'));
// В node в терминале можем вызвать этот код такой командой:
// node validate-password.js (здесь важно указывать путь по которому лежит файл, если файл лежит не в корневой пакет, а
// к примеру в папке js, тогда необходимо указать так: node js/validate-password.js чтобы наш код отработал в терминале)

// Мы можем прописывать кастомный запуск скрипта. Для этого в файле package.json в разделе "scripts", можем прописать так:
// "scripts": {
//     "valid": "node js/validate-password.js"
//   },

//   после чего в терминале мы можем запускать наш скрипт так: npm run valid и отработает тот же скрипт который был призапуске
//   команды node js/validate-password.js

// Есть только две спец. команды которые можно запускать без run, это start и test, все остальные через run

// Использование библиотеки shortid:
// const shortid = require('shortid');
// console.log(shortid.generate());

// Использование библиотеки express:
// Детально можно почитать в документации
// const express = require('express');
// const app = express();

// app.use('*', (req, res) => {
//     console.log('Был запрос от браузера');
//     res.send('<h1>Вот тебе HTML в ответ</h1>')
// })

// const listener = app.listen(4444, () => {
//     console.log(`Веб-сервер запущен на порте ${listener.address().port}`);
// })

// Все єто серверная часть. То как делается сервер. Этот курс Node.js будет после изучения React
// Библиотека express это только пример, можно при этом юзать аналогии типа nest